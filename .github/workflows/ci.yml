name: CI Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Tests unitaires backend (FastAPI + Pytest)
  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -uroot -proot --silent"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: Server/requirements.txt
      - name: Install backend dependencies
        run: pip install -r Server/requirements.txt
      # Les tests Pytest ne sont pas encore prêts : on commente cette étape
      # - name: Run backend tests (Pytest)
      #   env:
      #     DATABASE_URL: mysql+pymysql://root:root@127.0.0.1:3306/test_db
      #   run: pytest Server

  # Job 2: Test de chargement du modèle ML
  ml-model-test:
    name: ML Model Loading Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: Server/requirements.txt

      - name: Install dependencies (ML)
        run: |
          pip install -r Server/requirements.txt
          # ➜ ajoutez cette ligne si XGBoost n’est PAS dans requirements.txt
          # pip install xgboost==1.7.6

      - name: Load model and test prediction
        run: |
          python - <<'PYCODE'
          import pickle, sys, numpy as np, xgboost as xgb

          model_path = "Server/app/models/pipeline.pkl"

          # 1) Chargement ----------------------------------------------------------
          try:
              with open(model_path, "rb") as f:
                  model = pickle.load(f)
              print("✅ Model deserialized")
          except Exception as e:
              print(f"❌ Unable to load model from {model_path}: {e}")
              sys.exit(1)

          # 2) Extraction de l'estimateur XGBoost ----------------------------------
          def get_estimator(obj):
              if hasattr(obj, "get_booster"):        # XGBRegressor / XGBClassifier
                  return obj
              if hasattr(obj, "named_steps") and "model" in obj.named_steps:
                  return obj.named_steps["model"]    # Pipeline(...)
              return None

          est = get_estimator(model)

          # 3) Prédiction robuste ---------------------------------------------------
          try:
              if est is not None:                          # cas XGBoost
                  booster = est.get_booster()
                  n_feats = booster.num_features()
                  dmat   = xgb.DMatrix(
                              np.zeros((1, n_feats), dtype=np.float32))
                  booster.predict(dmat)
              else:                                        # fallback scikit-learn
                  n_feats = getattr(model, "n_features_in_", 1)
                  model.predict(np.zeros((1, n_feats), dtype=np.float32))
              print("✅ predict() ran successfully")
          except Exception as e:
              print(f"❌ Model loaded, but prediction failed: {e}")
              sys.exit(1)
          PYCODE

  # Job 3: Tests d’intégration frontend (React/Vite + Vitest)
  frontend-tests:
    name: Frontend Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Client/package-lock.json
      - name: Install frontend dependencies
        working-directory: Client
        run: npm ci
      # Les tests Vitest ne sont pas encore prêts : on commente cette étape
      # - name: Run frontend tests (Vitest)
      #   working-directory: Client
      #   run: npm run test

  # Job 4: Analyse SonarQube (statique + Quality Gate)
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [backend-tests, ml-model-test, frontend-tests]
    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate
        if: ${{ success() }}
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 300
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Job 5: Test d’accessibilité avec Pa11y
  accessibility-test:
    name: Accessibility Tests (Pa11y)
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Client/package-lock.json
      - name: Install and build frontend
        working-directory: Client
        run: |
          npm ci
          npm run build
      - name: Run Pa11y accessibility scan
        working-directory: Client
        run: |
          npm install -g wait-on pa11y-ci
          npm run preview &
          npx wait-on http://localhost:4173
          npx pa11y-ci http://localhost:4173
          kill $(jobs -p) || true
