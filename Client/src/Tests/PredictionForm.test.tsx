/// <reference types="vitest" />

import { render, screen, waitFor, fireEvent } from "@testing-library/react";
import PredictionForm from "../components/PredictionForm";
import { beforeEach, describe, expect, it, vi } from "vitest";
import * as api from "../api/predict";
import '@testing-library/jest-dom'
import { t } from 'i18next';

// Mock des appels API
vi.mock("../api/predict");

const mockedMetadata = {
  who_regions: ["Africa", "Europe"],
  countries_by_region: {
    Africa: ["Senegal", "Nigeria"],
    Europe: ["France", "Germany"],
  },
};

describe("PredictionForm", () => {
  beforeEach(() => {
    vi.clearAllMocks();
    (api.getMetadata as any).mockResolvedValue(mockedMetadata);
    (api.predict as any).mockResolvedValue({ pred_new_deaths: 42 });
  });

  it("affiche les r√©gions OMS et les pays selon la s√©lection", async () => {
    render(<PredictionForm />);

    // S√©lection de la r√©gion OMS
    const regionSelect = await screen.findByLabelText("WHO Region");
    fireEvent.change(regionSelect, { target: { value: "Africa" } });

    // V√©rifie que les bons pays sont affich√©s
    await waitFor(() => {
      expect(screen.getByLabelText("Country")).toBeInTheDocument();
      expect(screen.getByText("Senegal")).toBeInTheDocument();
      expect(screen.getByText("Nigeria")).toBeInTheDocument();
    });
  });
}); // üëà fermeture du describe ici !


  it("remplit les champs num√©riques et soumet le formulaire", async () => {
    render(<PredictionForm />);

    // Remplit le formulaire
    fireEvent.change(await screen.findByLabelText("WHO Region"), { target: { value: "Africa" } });
    fireEvent.change(screen.getByLabelText("Country"), { target: { value: "Senegal" } });
    fireEvent.change(screen.getByLabelText("Confirmed"), { target: { value: "1000" } });
    fireEvent.change(screen.getByLabelText("Deaths"), { target: { value: "10" } });
    fireEvent.change(screen.getByLabelText(t("form.fields.New_recovered")), { target: { value: "200" } });
    fireEvent.change(screen.getByLabelText(t("form.fields.Active")), { target: { value: "790" } });
    fireEvent.change(screen.getByLabelText(t('form.fields.New_cases')), { target: { value: "50" } });
    fireEvent.change(screen.getByLabelText(t("form.fields.Recovered")), { target: { value: "30" } });
    fireEvent.change(screen.getByLabelText(t("form.fields.date")), { target: { value: "2023-01-01" } });

    // Soumission
    fireEvent.click(screen.getByRole("button", { name: /predict/i })
);

    // V√©rifie le r√©sultat
    await waitFor(() => {
      expect(screen.getByText((content) =>
  content.includes("Predicted Deaths")
)).toBeInTheDocument();

      expect(screen.getByText(/42/)).toBeInTheDocument();
    });
  });

  it("affiche un message d'erreur si l'API √©choue", async () => {
    // Simule une erreur c√¥t√© API
    (api.predict as any).mockRejectedValueOnce(new Error("API down"));

    render(<PredictionForm />);

    fireEvent.change(await screen.findByLabelText("WHO Region"), { target: { value: "Africa" } });
    fireEvent.change(screen.getByLabelText("Country"), { target: { value: "Senegal" } });

  fireEvent.change(screen.getByLabelText("Confirmed"), { target: { value: "1000" } });
  fireEvent.change(screen.getByLabelText("Deaths"), { target: { value: "10" } });
  fireEvent.change(screen.getByLabelText("Recovered"), { target: { value: "200" } });
  fireEvent.change(screen.getByLabelText("Active"), { target: { value: "790" } });
  fireEvent.change(screen.getByLabelText(t("form.fields.New_cases")), { target: { value: "50" } });
  fireEvent.change(screen.getByLabelText(t("form.fields.Recovered")), { target: { value: "30" } });
  fireEvent.change(screen.getByLabelText(t("form.fields.date")), { target: { value: "2023-01-01" } });

  fireEvent.click(screen.getByRole("button", { name: /predict/i })
);

  await waitFor(() => {
    expect(screen.getByText(/Error during prediction/i)).toBeInTheDocument();
  });
});
it("n'envoie pas le formulaire si des champs sont vides", async () => {
  render(<PredictionForm />);

  fireEvent.change(await screen.findByLabelText("WHO Region"), { target: { value: "Africa" } });
  fireEvent.change(screen.getByLabelText("Country"), { target: { value: "Senegal" } });

  // Laisse tous les autres champs vides

  const submitButton = screen.getByRole("button", { name: /predict/i })
;
  fireEvent.click(submitButton);

  await waitFor(() => {
    // Il ne doit PAS y avoir de texte "nouveaux d√©c√®s pr√©dits"
    expect(screen.queryByText(/Predicted Deaths/i)).not.toBeInTheDocument();
  });
});
it("d√©sactive le bouton pendant la pr√©diction", async () => {
  // Simule un d√©lai pour voir l'√©tat interm√©diaire
  (api.predict as any).mockImplementation(() => new Promise(resolve =>
    setTimeout(() => resolve({ pred_new_deaths: 42 }), 500)
  ));

  render(<PredictionForm />);

  fireEvent.change(await screen.findByLabelText("WHO Region"), { target: { value: "Africa" } });
fireEvent.change(screen.getByLabelText("Country"), { target: { value: "Senegal" } });
fireEvent.change(screen.getByLabelText("Confirmed"), { target: { value: "1000" } });
fireEvent.change(screen.getByLabelText("Deaths"), { target: { value: "10" } });
fireEvent.change(screen.getByLabelText("Recovered"), { target: { value: "200" } });
fireEvent.change(screen.getByLabelText("Active"), { target: { value: "790" } });
fireEvent.change(screen.getByLabelText(t("form.fields.New_cases")), { target: { value: "50" } });
fireEvent.change(screen.getByLabelText(t("form.fields.Recovered")), { target: { value: "30" } });
fireEvent.change(screen.getByLabelText(t("form.fields.date")), { target: { value: "2023-01-01" } });


  const submitButton = screen.getByRole("button", { name: /predict/i })
;
  fireEvent.click(submitButton);

  // D√®s le clic, le bouton doit √™tre d√©sactiv√© (et afficher "Calcul‚Ä¶")
  expect(submitButton).toBeDisabled();
  expect(submitButton).toHaveTextContent(/calcul/i);

  // Attend la fin
  await waitFor(() => {
    expect(screen.getByText(/Predicted Deaths/i)).toBeInTheDocument();
  });

  it("n'envoie pas le formulaire si des champs sont vides", async () => {
    render(<PredictionForm />);

    fireEvent.change(await screen.findByLabelText("WHO Region"), { target: { value: "Africa" } });
    fireEvent.change(screen.getByLabelText("Country"), { target: { value: "Senegal" } });

    // Laisse tous les autres champs vides

    const submitButton = screen.getByRole("button", { name: /pr√©diction/i });
    fireEvent.click(submitButton);

    await waitFor(() => {
      // Il ne doit PAS y avoir de texte "nouveaux d√©c√®s pr√©dits"
      expect(screen.queryByText(/D√©c√®s Pr√©dits/i)).not.toBeInTheDocument();
    });
  });

  it("d√©sactive le bouton pendant la pr√©diction", async () => {
    // Simule un d√©lai pour voir l'√©tat interm√©diaire
    (api.predict as any).mockImplementation(() => new Promise(resolve =>
      setTimeout(() => resolve({ pred_new_deaths: 42 }), 500)
    ));

    render(<PredictionForm />);

    fireEvent.change(await screen.findByLabelText("WHO Region"), { target: { value: "Africa" } });
    fireEvent.change(screen.getByLabelText("Country"), { target: { value: "Senegal" } });
    fireEvent.change(screen.getByLabelText("Confirmed"), { target: { value: "1000" } });
    fireEvent.change(screen.getByLabelText("Deaths"), { target: { value: "10" } });
    fireEvent.change(screen.getByLabelText("Recovered"), { target: { value: "200" } });
    fireEvent.change(screen.getByLabelText("Active"), { target: { value: "790" } });
    fireEvent.change(screen.getByLabelText("New cases"), { target: { value: "50" } });
    fireEvent.change(screen.getByLabelText("New recovered"), { target: { value: "30" } });
    fireEvent.change(screen.getByLabelText("date"), { target: { value: "2023-01-01" } });

    const submitButton = screen.getByRole("button", { name: /pr√©diction/i });
    fireEvent.click(submitButton);

    // D√®s le clic, le bouton doit √™tre d√©sactiv√© (et afficher "Calcul‚Ä¶")
    expect(submitButton).toBeDisabled();
    expect(submitButton).toHaveTextContent(/calcul/i);

    // Attend la fin
    await waitFor(() => {
      expect(screen.getByText(/D√©c√®s Pr√©dits/i)).toBeInTheDocument();
    });

    // Le bouton est √† nouveau actif
    expect(submitButton).not.toBeDisabled();
  });
});