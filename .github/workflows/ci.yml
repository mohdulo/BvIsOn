name: CI Pipeline

on:
  push:
    branches: [main,features/ci]
  pull_request:
    branches: [main]

jobs:

  # ‚úÖ Job 1: Tests unitaires backend
  backend-tests:
    name: tests unitaires Backend 
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot --silent"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: Server/requirements.txt
      - name: Install backend dependencies
        run: pip install -r Server/requirements.txt
      # - name: Run backend tests
      #   env:
      #     DATABASE_URL: mysql+pymysql://root:root@127.0.0.1:3306/test_db
      #   run: pytest Server

  # ‚úÖ Job 2: Test de chargement mod√®le ML
  ml-model-test:
    name: Test de chargement mod√®le ML
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: Server/requirements.txt
      - name: Install dependencies
        run: pip install -r Server/requirements.txt
      - name: Test ML model loading
        run: |
          python Server/scripts/test_model_pickle.py

  # ‚úÖ Job 3: Int√©gration frontend
  frontend-tests:
    name: Tests d'integration frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Client/package-lock.json
      - name: Install frontend deps
        working-directory: Client
        run: npm ci
      # - name: Run Vitest
      #   working-directory: Client
      #   run: npm run test

  # ‚úÖ Job 4: Lint Python avec Black
  lint-python:
    name: Tests de lint Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies (Black only)
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run Black (check for unformatted files)
        working-directory: Server
        run: |
          echo "üîç Checking code formatting with Black..."
          black --check .

  # ‚úÖ Job 5: Test accessibilit√© avec Pa11y
  accessibility-test:
    name: Tests d'accessibilit√© (Pa11y)
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Client/package-lock.json
      - name: Build frontend
        working-directory: Client
        run: |
          npm ci
          npm run build
      - name: Run Pa11y
        working-directory: Client
        run: |
          npm install -g wait-on pa11y-ci
          npm run preview &
          npx wait-on http://localhost:4173
          npx pa11y-ci http://localhost:4173
          kill $(jobs -p) || true
